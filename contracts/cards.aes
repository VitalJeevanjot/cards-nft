include "List.aes"
// For wallet holders
contract CardsNFT =

    record icon_data = {
        data1: int,
        data2: int,
        data3: int,
        data4: int
     }
    record indicated_data = {
        indicator1: int,
        indicator2: int,
        indicator3: int
        }
    record card_data = {
        rarity: string,
        series: string,
        background_img: string,
        hero_img: string,
        effects: string,
        title: string,
        status: string,
        description: string
     }
    
    record card_details_all = {
        icon_data : icon_data,
        indicated_data : indicated_data,
        card_details : card_data 
     }
    record state = {
        token_owner : map(bytes(32), address), 
        token_approvals: map(bytes(32), list(address * int)), ///  int is number of parts of that token, can be set manually, Max 1000, Default 1, for now.
        token_owns: map(address, list(bytes(32) * int)), // int is number of parts of that token, can be set manually, Max 1000, Default 1, for now, to tell how much it holds
        cards: map(bytes(32), card_details_all),
        wallet_init: map(address, bool) // free startup card for every wallet
        // create new contract for each type ... aens_init: map(address, bool), // free startup card for every ae name holder
        // create new contract for each type ... miner_init: map(address, bool), // free startup card for every miner
        // create new contract for each type ... hackathon_init: map(address, bool) // free startup card for every hackathon winner
        }


    stateful entrypoint init() = 
        { token_owner = {},
            token_owns = {},
            token_approvals = {},
            cards = {},
            wallet_init = {}
            // aens_init = {},
            // miner_init = {},
            // hackathon_init = {}
            }

    // get owner
    public stateful entrypoint ownerOfToken(_token_id: bytes(32)) : option(address) =
        Map.lookup(_token_id, state.token_owner)
    
    // get approved for token
    public stateful entrypoint approvedForToken(_token_id: bytes(32), approved_addr : address) : option(int) =
        let addresses : map(address, int) = Map.from_list(state.token_approvals[_token_id])
        Map.lookup(approved_addr, addresses)
        // List.find((addr) => addr == approved_addr, Map.lookup_default(_token_id, addresses, []))
        
    // transfer token
    public stateful entrypoint transfer (_to: address, _token_id: bytes(32), amount : int) =
        require(String.length(Bytes.to_str(_token_id)) >= 1, "Token Id required")
      
        clearApproval(Some(Call.caller), _token_id)
        removeTokenFrom(Call.caller, _token_id)
        addTokenTo(_to, _token_id, amount) 
        // Since reentrancy attacks not possible in sophia, so increment added first because of the below code effects but if there is another attack please feel free to suggest that i should put increment below decrement
        
        
    // clear approval from a token
    private stateful function clearApproval(_user: option(address), _token_id: bytes(32)): bool =
        require(ownerOfToken(_token_id) == _user, "For clearApproval Owner of token is not you!")
        if(Map.member(_token_id, state.token_approvals))
          Map.delete(_token_id, state.token_approvals)
          true
        else
          false
          
    // add operation
    private stateful function addTokenTo(_to: address, _token_id: bytes(32), amount : int) =
        require(String.length(Bytes.to_str(_token_id)) >= 1, "Token Id required")

        put(state{token_owner[_token_id] = _to})
        
        put(state{token_owns[_to] @ tokens = (_token_id, amount) :: tokens })
        
    // remove operation
    private stateful function removeTokenFrom(_from: address, _token_id: bytes(32)): string =
        require(String.length(Bytes.to_str(_token_id)) >= 1, "Token Id required")
        if((ownerOfToken(_token_id) == Some(_from)) || (approvedForToken(_token_id, Call.caller) >= Some(1)))
          Map.delete(_token_id, state.token_owner)
          let tokens = Map.from_list(state.token_owns[_from])
          Map.delete(_token_id, tokens)

          put(state{token_owns[Call.caller] = Map.to_list(tokens) })
          "Done"
          
        else  
          "cannot done"
            
    // mint token
    public stateful entrypoint mint(_token_id: bytes(32), shares: int) =
        require(String.length(Bytes.to_str(_token_id)) >= 1, "Token Id required")
        require(ownerOfToken(_token_id) == None, "Token id already exist")

        addTokenTo(Call.caller, _token_id, shares)

    // burn token
    public stateful entrypoint burn(_token_id: bytes(32)) =
        require(String.length(Bytes.to_str(_token_id)) >= 1, "Token Id required")

        clearApproval(Some(Call.caller), _token_id)
        removeTokenFrom(Call.caller, _token_id)
    
    // approve someone (will have same rights as owner)
    public stateful entrypoint approve(_to: address, _token_id: bytes(32), amount : int) =
        require(String.length(Bytes.to_str(_token_id)) >= 1, "Token Id required")
        require(ownerOfToken(_token_id) == Some(Call.caller), "The owner is not you for this token id yet!.")

        put(state{token_approvals[_token_id] @ token_approves = (_to, amount) :: token_approves})
    
    // get list of owned tokens
    public entrypoint allTokensOwnedOrNotNow (holder: address) : option(list(bytes(32) * int)) = 
        Map.lookup(Call.caller, state.token_owns)

// Add a transfer for free function if the contract address is approved by admin for future migrations to new contracts, if required.